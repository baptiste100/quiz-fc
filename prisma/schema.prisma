// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Quiz {
  id         Int          @id @default(autoincrement())
  name       String
  difficulty Difficulty
  questions  Question[]
  results    QuizResult[]
}

model Question {
  id              Int              @id @default(autoincrement())
  question        String
  quiz            Quiz             @relation(fields: [quizId], references: [id])
  quizId          Int
  questionResults QuestionResult[]
  answers         Answer[]
}

model Answer {
  id         Int      @id @default(autoincrement())
  answerText String
  isCorrect  Boolean
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id            String       @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  quizResults   QuizResult[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model QuizResult {
  id     Int    @id @default(autoincrement())
  quizId Int
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  date            DateTime         @default(now())
  score           Int?
  questionResults QuestionResult[]

  @@map("result")
}

model QuestionResult {
  questionId Int
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  resultId   Int
  result     QuizResult @relation(fields: [resultId], references: [id], onDelete: Cascade)

  isCorrect     Boolean
  givenAnswerId Int?

  @@id([questionId, resultId])
  @@map("question_result")
}
